import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import time
import re

# ==================== FUNCIONES DE VALIDACI√ìN ESTRICTA ====================
def validate_name(name):
    """
    Valida que el nombre tenga al menos dos palabras.
    Retorna (es_v√°lido, mensaje_error)
    """
    if not name or not name.strip():
        return False, "El nombre es obligatorio"
    
    # Limpiar espacios extra y dividir en palabras
    words = name.strip().split()
    
    if len(words) < 2:
        return False, "El nombre debe contener al menos dos palabras (nombre y apellido)"
    
    # Verificar que cada palabra tenga al menos 2 caracteres y solo contenga letras y espacios
    for word in words:
        if len(word) < 2:
            return False, "Cada palabra del nombre debe tener al menos 2 caracteres"
        if not re.match(r'^[a-zA-Z√°√©√≠√≥√∫√Å√â√ç√ì√ö√º√ú√±√ë]+$', word):
            return False, "El nombre solo puede contener letras y espacios"
    
    return True, ""

def validate_phone(phone):
    """
    Valida que el tel√©fono tenga exactamente 10 d√≠gitos.
    Retorna (es_v√°lido, mensaje_error)
    """
    if not phone or not phone.strip():
        return False, "El tel√©fono es obligatorio"
    
    # Limpiar espacios y caracteres especiales
    clean_phone = re.sub(r'[^0-9]', '', phone.strip())
    
    if len(clean_phone) != 10:
        return False, "El tel√©fono debe tener exactamente 10 d√≠gitos"
    
    # Verificar que todos sean d√≠gitos
    if not clean_phone.isdigit():
        return False, "El tel√©fono solo puede contener n√∫meros"
    
    return True, ""

def validate_email(email):
    """
    Valida que el email tenga formato est√°ndar.
    Retorna (es_v√°lido, mensaje_error)
    """
    if not email or not email.strip():
        return False, "El email es obligatorio"
    
    # Patr√≥n regex para email est√°ndar
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if not re.match(email_pattern, email.strip()):
        return False, "El email debe tener un formato v√°lido (ejemplo: usuario@dominio.com)"
    
    return True, ""

# ==================== CONFIGURACI√ìN DE P√ÅGINA Y CSS MEJORADO ====================
st.set_page_config(
    page_title="MUPAI - Evaluaci√≥n de Patrones Alimentarios",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

st.markdown("""
<style>
:root {
    --mupai-yellow: #F4C430;
    --mupai-dark-yellow: #DAA520;
    --mupai-black: #181A1B;
    --mupai-gray: #232425;
    --mupai-light-gray: #EDEDED;
    --mupai-white: #FFFFFF;
    --mupai-success: #27AE60;
    --mupai-warning: #F39C12;
    --mupai-danger: #E74C3C;
}
/* Fondo general */
.stApp {
    background: linear-gradient(135deg, #1E1E1E 0%, #232425 100%);
}
.main-header {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%);
    color: #181A1B;
    padding: 2rem 1rem;
    border-radius: 18px;
    text-align: center;
    margin-bottom: 2rem;
    box-shadow: 0 10px 30px rgba(244, 196, 48, 0.20);
    animation: fadeIn 0.5s ease-out;
}
.content-card {
    background: #1E1E1E;
    padding: 2rem 1.3rem;
    border-radius: 16px;
    box-shadow: 0 5px 22px 0px rgba(244,196,48,0.07), 0 1.5px 8px rgba(0,0,0,0.11);
    margin-bottom: 1.7rem;
    border-left: 5px solid var(--mupai-yellow);
    animation: slideIn 0.5s;
}
.card-psmf {
    border-left-color: var(--mupai-warning)!important;
}
.card-success {
    border-left-color: var(--mupai-success)!important;
}
.content-card, .content-card * {
    color: #FFF !important;
    font-weight: 500;
    letter-spacing: 0.02em;
}
.stButton > button {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%);
    color: #232425;
    border: none;
    padding: 0.85rem 2.3rem;
    font-weight: bold;
    border-radius: 28px;
    transition: all 0.3s;
    box-shadow: 0 4px 16px rgba(244, 196, 48, 0.18);
    text-transform: uppercase;
    letter-spacing: 1.5px;
    font-size: 1.15rem;
}
.stButton > button:hover {
    filter: brightness(1.04);
    box-shadow: 0 7px 22px rgba(244, 196, 48, 0.24);
}
.stTextInput > div > div > input,
.stNumberInput > div > div > input,
.stSelectbox > div > div > select {
    border: 2px solid var(--mupai-yellow)!important;
    border-radius: 11px!important;
    padding: 0.7rem 0.9rem!important;
    background: #232425!important;
    color: #fff!important;
    font-size: 1.13rem!important;
    font-weight: 600!important;
}
/* Special styling for selectboxes */
.stSelectbox[data-testid="stSelectbox"] > div > div > select {
    background: #F8F9FA!important;
    color: #1E1E1E!important;
    border: 2px solid #DAA520!important;
    font-weight: bold!important;
}
.stSelectbox[data-testid="stSelectbox"] option {
    background: #FFFFFF!important;
    color: #1E1E1E!important;
    font-weight: bold!important;
}
.stTextInput label, .stNumberInput label, .stSelectbox label,
.stRadio label, .stCheckbox label, .stDateInput label, .stMarkdown,
.stExpander .streamlit-expanderHeader, .stExpander label, .stExpander p, .stExpander div {
    color: #fff !important;
    opacity: 1 !important;
    font-weight: 700 !important;
    font-size: 1.04rem !important;
}
.stTextInput input::placeholder,
.stNumberInput input::placeholder {
    color: #e0e0e0 !important;
    opacity: 1 !important;
}
.stAlert > div {
    border-radius: 11px;
    padding: 1.1rem;
    border-left: 5px solid;
    background: #222326 !important;
    color: #FFF !important;
}
[data-testid="metric-container"] {
    background: linear-gradient(125deg, #252525 0%, #303030 100%);
    padding: 1.1rem 1rem;
    border-radius: 12px;
    border-left: 4px solid var(--mupai-yellow);
    box-shadow: 0 2.5px 11px rgba(0,0,0,0.11);
    color: #fff !important;
}
.streamlit-expanderHeader {
    background: linear-gradient(135deg, var(--mupai-gray) 70%, #242424 100%);
    border-radius: 12px;
    font-weight: bold;
    color: #FFF !important;
    border: 2px solid var(--mupai-yellow);
    font-size: 1.16rem;
}
.stRadio > div {
    background: #181A1B !important;
    padding: 1.1rem 0.5rem;
    border-radius: 10px;
    border: 2px solid transparent;
    transition: all 0.3s;
    color: #FFF !important;
}
.stRadio > div:hover {
    border-color: var(--mupai-yellow);
}
.stCheckbox > label, .stCheckbox > span {
    color: #FFF !important;
    opacity: 1 !important;
    font-size: 1.05rem;
}
.stProgress > div > div > div {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%)!important;
    border-radius: 10px;
    animation: pulse 1.2s infinite;
}
@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.92; }
    100% { opacity: 1; }
}
@keyframes fadeIn { from { opacity: 0; transform: translateY(20px);} to { opacity: 1; transform: translateY(0);} }
@keyframes slideIn { from { opacity: 0; transform: translateX(-18px);} to { opacity: 1; transform: translateX(0);} }
.badge {
    display: inline-block;
    padding: 0.32rem 0.98rem;
    border-radius: 18px;
    font-size: 0.97rem;
    font-weight: 800;
    margin: 0.27rem;
    color: #FFF;
    background: #313131;
    border: 1px solid #555;
}
.badge-success { background: var(--mupai-success); }
.badge-warning { background: var(--mupai-warning); color: #222; border: 1px solid #b78a09;}
.badge-danger { background: var(--mupai-danger); }
.badge-info { background: var(--mupai-yellow); color: #1E1E1E;}
.dataframe {
    border-radius: 10px !important;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    background: #2A2A2A!important;
    color: #FFF!important;
}
hr {
    border: none;
    height: 2.5px;
    background: linear-gradient(to right, transparent, var(--mupai-yellow), transparent);
    margin: 2.1rem 0;
}
@media (max-width: 768px) {
    .main-header { padding: 1.2rem;}
    .content-card { padding: 1.1rem;}
    .stButton > button { padding: 0.5rem 1.1rem; font-size: 0.96rem;}
}
.content-card:hover {
    transform: translateY(-1.5px);
    box-shadow: 0 8px 27px rgba(0,0,0,0.17);
    transition: all 0.25s;
}
.gradient-text {
    background: linear-gradient(135deg, var(--mupai-yellow) 0%, var(--mupai-dark-yellow) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 900;
    font-size: 1.11rem;
}
.footer-mupai {
    text-align: center;
    padding: 2.2rem 0.3rem 2.2rem 0.3rem;
    background: linear-gradient(135deg, #202021 0%, #232425 100%);
    border-radius: 15px;
    color: #FFF;
    margin-top: 2.2rem;
}
.footer-mupai h4 { color: var(--mupai-yellow); margin-bottom: 1.1rem;}
.footer-mupai a {
    color: var(--mupai-yellow);
    text-decoration: none;
    margin: 0 1.2rem;
    font-weight: 600;
    font-size: 1.01rem;
}
</style>
""", unsafe_allow_html=True)

# Header principal visual con logos
import base64

# Cargar y codificar los logos desde la ra√≠z del repo
try:
    with open('LOGO MUPAI.png', 'rb') as f:
        logo_mupai_b64 = base64.b64encode(f.read()).decode()
except FileNotFoundError:
    logo_mupai_b64 = ""

try:
    with open('LOGO MUP.png', 'rb') as f:
        logo_gym_b64 = base64.b64encode(f.read()).decode()
except FileNotFoundError:
    logo_gym_b64 = ""

st.markdown(f"""
<style>
.header-container {{
    background: #000000;
    padding: 2rem 1rem;
    border-radius: 18px;
    margin-bottom: 2rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    animation: fadeIn 0.5s ease-out;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: relative;
}}

.logo-left, .logo-right {{
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    max-width: 150px;
}}

.logo-left img, .logo-right img {{
    max-height: 80px;
    max-width: 100%;
    height: auto;
    width: auto;
    object-fit: contain;
}}

.header-center {{
    flex: 1;
    text-align: center;
    padding: 0 2rem;
}}

.header-title {{
    color: #FFB300;
    font-size: 2.2rem;
    font-weight: 900;
    margin: 0;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    line-height: 1.2;
}}

.header-subtitle {{
    color: #FFFFFF;
    font-size: 1rem;
    margin: 0.5rem 0 0 0;
    opacity: 0.9;
}}

@media (max-width: 768px) {{
    .header-container {{
        flex-direction: column;
        text-align: center;
    }}
    
    .logo-left, .logo-right {{
        margin-bottom: 1rem;
    }}
    
    .header-center {{
        padding: 0;
    }}
    
    .header-title {{
        font-size: 1.8rem;
    }}
}}
</style>

<div class="header-container">
    <div class="logo-left">
        <img src="data:image/png;base64,{logo_mupai_b64}" alt="LOGO MUPAI" />
    </div>
    <div class="header-center">
        <h1 class="header-title">TEST MUPAI: PATRONES ALIMENTARIOS</h1>
        <p class="header-subtitle">Tu evaluaci√≥n personalizada de h√°bitos y preferencias alimentarias basada en ciencia</p>
    </div>
    <div class="logo-right">
        <img src="data:image/png;base64,{logo_gym_b64}" alt="LOGO MUSCLE UP GYM" />
    </div>
</div>
""", unsafe_allow_html=True)

# --- Inicializaci√≥n de estado de sesi√≥n robusta (solo una vez)
defaults = {
    "datos_completos": False,
    "correo_enviado": False,
    "preferencias_alimentarias": {},
    "restricciones_dieteticas": {},
    "nombre": "",
    "telefono": "",
    "email_cliente": "",
    "edad": "",
    "sexo": "Hombre",
    "fecha_llenado": datetime.now().strftime("%Y-%m-%d"),
    "acepto_terminos": False,
    "authenticated": False  # Nueva variable para controlar el login
}
for k, v in defaults.items():
    if k not in st.session_state:
        st.session_state[k] = v

# ==================== SISTEMA DE AUTENTICACI√ìN ====================
ADMIN_PASSWORD = "MUPAI2025"  # Contrase√±a predefinida

# Si no est√° autenticado, mostrar login
if not st.session_state.authenticated:
    st.markdown("""
    <div class="content-card" style="max-width: 500px; margin: 2rem auto; text-align: center;">
        <h2 style="color: var(--mupai-yellow); margin-bottom: 1.5rem;">
            üîê Acceso Exclusivo
        </h2>
        <p style="margin-bottom: 2rem; color: #CCCCCC;">
            Ingresa la contrase√±a para acceder al sistema de evaluaci√≥n de patrones alimentarios MUPAI
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Container centrado para el formulario de login
    login_container = st.container()
    with login_container:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            password_input = st.text_input(
                "Contrase√±a", 
                type="password", 
                placeholder="Ingresa la contrase√±a de acceso",
                key="password_input"
            )
            
            if st.button("üöÄ Acceder al Sistema", use_container_width=True):
                if password_input == ADMIN_PASSWORD:
                    st.session_state.authenticated = True
                    st.success("‚úÖ Acceso autorizado. Bienvenido al sistema MUPAI de patrones alimentarios.")
                    st.rerun()
                else:
                    st.error("‚ùå Contrase√±a incorrecta. Acceso denegado.")
    
    # Mostrar informaci√≥n mientras no est√© autenticado
    st.markdown("""
    <div class="content-card" style="margin-top: 3rem; text-align: center; background: #1A1A1A;">
        <h3 style="color: var(--mupai-yellow);">Sistema de Evaluaci√≥n de Patrones Alimentarios</h3>
        <p style="color: #CCCCCC;">
            MUPAI utiliza metodolog√≠as cient√≠ficas avanzadas para evaluar patrones alimentarios 
            personalizados, preferencias diet√©ticas y crear planes nutricionales adaptativos.
        </p>
        <p style="color: #999999; font-size: 0.9rem; margin-top: 1.5rem;">
            ¬© 2025 MUPAI - Muscle up GYM 
            Digital Nutrition Science
            Alimentary Pattern Assessment Intelligence
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    st.stop()  # Detener la ejecuci√≥n hasta que se autentique

# Tarjetas visuales robustas
def crear_tarjeta(titulo, contenido, tipo="info"):
    colores = {
        "info": "var(--mupai-yellow)",
        "success": "var(--mupai-success)",
        "warning": "var(--mupai-warning)",
        "danger": "var(--mupai-danger)"
    }
    color = colores.get(tipo, "var(--mupai-yellow)")
    return f"""
    <div class="content-card" style="border-left-color: {color};">
        <h3 style="margin-bottom: 1rem;">{titulo}</h3>
        <div>{contenido}</div>
    </div>
    """

def enviar_email_resumen(contenido, nombre_cliente, email_cliente, fecha, edad, telefono):
    """Env√≠a el email con el resumen completo de la evaluaci√≥n de patrones alimentarios."""
    try:
        email_origen = "administracion@muscleupgym.fitness"
        email_destino = "administracion@muscleupgym.fitness"
        password = st.secrets.get("zoho_password", "TU_PASSWORD_AQUI")

        msg = MIMEMultipart()
        msg['From'] = email_origen
        msg['To'] = email_destino
        msg['Subject'] = f"Evaluaci√≥n patrones alimentarios MUPAI - {nombre_cliente} ({fecha})"

        msg.attach(MIMEText(contenido, 'plain'))

        server = smtplib.SMTP('smtp.zoho.com', 587)
        server.starttls()
        server.login(email_origen, password)
        server.send_message(msg)
        server.quit()

        return True
    except Exception as e:
        st.error(f"Error al enviar email: {str(e)}")
        return False

# ==================== VISUALES INICIALES ====================

# Misi√≥n, Visi√≥n y Compromiso con dise√±o mejorado
with st.expander("üéØ **Misi√≥n, Visi√≥n y Compromiso MUPAI**", expanded=False):
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(crear_tarjeta(
            "üéØ Misi√≥n",
            "Hacer accesible la evaluaci√≥n nutricional basada en ciencia, ofreciendo an√°lisis de patrones alimentarios personalizados que se adaptan a todos los estilos de vida.",
            "info"
        ), unsafe_allow_html=True)
    with col2:
        st.markdown(crear_tarjeta(
            "üëÅÔ∏è Visi√≥n",
            "Ser el referente global en evaluaci√≥n de patrones alimentarios digitales, uniendo investigaci√≥n nutricional con experiencia pr√°ctica personalizada.",
            "success"
        ), unsafe_allow_html=True)
    with col3:
        st.markdown(crear_tarjeta(
            "ü§ù Compromiso",
            "Nos guiamos por la √©tica, transparencia y precisi√≥n cient√≠fica para ofrecer recomendaciones nutricionales reales, medibles y sostenibles.",
            "warning"
        ), unsafe_allow_html=True)

# BLOQUE 0: Datos personales con dise√±o mejorado
st.markdown('<div class="content-card">', unsafe_allow_html=True)
st.markdown("### üë§ Informaci√≥n Personal")
st.markdown("Por favor, completa todos los campos para comenzar tu evaluaci√≥n de patrones alimentarios personalizada.")

col1, col2 = st.columns(2)
with col1:
    nombre = st.text_input("Nombre completo*", placeholder="Ej: Juan P√©rez Garc√≠a", help="Tu nombre legal completo")
    telefono = st.text_input("Tel√©fono*", placeholder="Ej: 8661234567", help="10 d√≠gitos sin espacios")
    email_cliente = st.text_input("Email*", placeholder="correo@ejemplo.com", help="Email v√°lido para recibir resultados")

with col2:
    edad = st.number_input("Edad (a√±os)*", min_value=15, max_value=80, value=25, help="Tu edad actual")
    sexo = st.selectbox("Sexo biol√≥gico*", ["Hombre", "Mujer"], help="Necesario para an√°lisis nutricionales precisos")
    fecha_llenado = datetime.now().strftime("%Y-%m-%d")
    st.info(f"üìÖ Fecha de evaluaci√≥n: {fecha_llenado}")

acepto_terminos = st.checkbox("He le√≠do y acepto la pol√≠tica de privacidad y el descargo de responsabilidad")

if st.button("üöÄ COMENZAR EVALUACI√ìN", disabled=not acepto_terminos):
    # Validaci√≥n estricta de cada campo
    name_valid, name_error = validate_name(nombre)
    phone_valid, phone_error = validate_phone(telefono)
    email_valid, email_error = validate_email(email_cliente)
    
    # Mostrar errores espec√≠ficos para cada campo que falle
    validation_errors = []
    if not name_valid:
        validation_errors.append(f"**Nombre:** {name_error}")
    if not phone_valid:
        validation_errors.append(f"**Tel√©fono:** {phone_error}")
    if not email_valid:
        validation_errors.append(f"**Email:** {email_error}")
    
    # Solo proceder si todas las validaciones pasan
    if name_valid and phone_valid and email_valid:
        st.session_state.datos_completos = True
        st.session_state.nombre = nombre
        st.session_state.telefono = telefono
        st.session_state.email_cliente = email_cliente
        st.session_state.edad = edad
        st.session_state.sexo = sexo
        st.session_state.fecha_llenado = fecha_llenado
        st.session_state.acepto_terminos = acepto_terminos
        st.success("‚úÖ Datos registrados correctamente. ¬°Continuemos con tu evaluaci√≥n de patrones alimentarios!")
    else:
        # Mostrar todos los errores de validaci√≥n
        error_message = "‚ö†Ô∏è **Por favor corrige los siguientes errores:**\n\n" + "\n\n".join(validation_errors)
        st.error(error_message)

st.markdown('</div>', unsafe_allow_html=True)

if not st.session_state.datos_completos:
    st.markdown("""
    <div class="content-card" style="margin-top:2rem; padding:3rem; background: #181A1B; color: #F5F5F5; border-left: 5px solid #F4C430;">
        <div style="text-align:center;">
            <h2 style="color: #F5C430; font-weight:900; margin:0;">
                üçΩÔ∏è Bienvenido a MUPAI Patrones Alimentarios
            </h2>
            <p style="color: #F5F5F5;font-size:1.1rem;font-weight:600;margin-top:1.5rem;">
                <span style="font-size:1.15rem; font-weight:700;">¬øC√≥mo funciona la evaluaci√≥n?</span>
            </p>
            <div style="text-align:left;display:inline-block;max-width:650px;">
                <ul style="list-style:none;padding:0;">
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üìù</span> <b>Paso 1:</b> Datos personales<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Recopilamos tu informaci√≥n b√°sica para personalizar la evaluaci√≥n nutricional.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">ü•ó</span> <b>Paso 2:</b> Preferencias alimentarias<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Identificamos tus gustos, aversiones y preferencias de sabores y texturas.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üö´</span> <b>Paso 3:</b> Restricciones y alergias<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Evaluamos restricciones diet√©ticas, alergias e intolerancias alimentarias.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">‚è∞</span> <b>Paso 4:</b> Patrones de comida y horarios<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Analizamos frecuencia de comidas, horarios y h√°bitos de alimentaci√≥n.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üë®‚Äçüç≥</span> <b>Paso 5:</b> Habilidades culinarias y preparaci√≥n<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Evaluamos nivel de cocina, tiempo disponible y m√©todos de preparaci√≥n preferidos.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üèõÔ∏è</span> <b>Paso 6:</b> Contexto cultural y social<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Consideramos tradiciones culturales, contexto social y situaciones especiales.
                        </span>
                    </li>
                    <li style="margin-bottom:1.1em;">
                        <span style="font-size:1.3rem;">üìà</span> <b>Resultado final:</b> Plan alimentario personalizado<br>
                        <span style="color:#F5F5F5;font-size:1rem;">
                            Recibes recomendaciones nutricionales adaptadas a tus preferencias y necesidades.
                        </span>
                    </li>
                </ul>
                <div style="margin-top:1.2em; font-size:1rem; color:#F4C430;">
                    <b>Finalidad:</b> Esta evaluaci√≥n integra principios de nutrici√≥n personalizada para ofrecerte recomendaciones alimentarias que se ajusten a tu estilo de vida. <br>
                    <b>Tiempo estimado:</b> Menos de 10 minutos.
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# VALIDACI√ìN DATOS PERSONALES PARA CONTINUAR
datos_personales_completos = all([nombre, telefono, email_cliente]) and acepto_terminos

if datos_personales_completos and st.session_state.datos_completos:
    # Progress bar general
    progress = st.progress(0)
    progress_text = st.empty()

    # INSTRUCCIONES INICIALES
    st.markdown("""
    <div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E; margin-bottom: 2rem;">
        <h2 style="color: #1E1E1E; text-align: center; margin-bottom: 1.5rem;">
            üìã INSTRUCCIONES DEL CUESTIONARIO
        </h2>
        <div style="text-align: left; font-size: 1.1rem; line-height: 1.6;">
            <p><strong>üéØ Objetivo:</strong> Este cuestionario nos ayudar√° a crear un plan nutricional completamente personalizado basado en tus preferencias, necesidades y estilo de vida.</p>
            
            <p><strong>üìù Instrucciones:</strong></p>
            <ul style="margin-left: 1.5rem;">
                <li>Responde todas las preguntas con honestidad y precisi√≥n</li>
                <li>Si no est√°s seguro de una respuesta, elige la opci√≥n m√°s cercana a tu realidad</li>
                <li>No hay respuestas correctas o incorrectas, solo necesitamos conocerte mejor</li>
                <li>El cuestionario tiene 6 grupos principales m√°s secciones adicionales</li>
                <li>Toma tu tiempo, la calidad de tus respuestas mejorar√° tu plan nutricional</li>
            </ul>
            
            <p><strong>‚è±Ô∏è Tiempo estimado:</strong> 15-20 minutos</p>
            <p><strong>üîí Privacidad:</strong> Toda tu informaci√≥n ser√° tratada de forma confidencial</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

    # GRUPO 1: INFORMACI√ìN B√ÅSICA NUTRICIONAL
    with st.expander("ü•ó **GRUPO 1: INFORMACI√ìN B√ÅSICA NUTRICIONAL**", expanded=True):
        progress.progress(10)
        progress_text.text("Grupo 1 de 6: Informaci√≥n b√°sica nutricional")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üçΩÔ∏è H√°bitos alimentarios actuales")
        
        col1, col2 = st.columns(2)
        with col1:
            comidas_por_dia_actual = st.selectbox(
                "¬øCu√°ntas comidas realizas habitualmente al d√≠a?",
                ["1 comida", "2 comidas", "3 comidas", "4 comidas", "5 comidas", "6 o m√°s comidas"],
                help="Incluye todas las comidas principales y colaciones"
            )
            
            agua_diaria = st.selectbox(
                "¬øCu√°ntos vasos de agua tomas al d√≠a aproximadamente?",
                ["1-2 vasos", "3-4 vasos", "5-6 vasos", "7-8 vasos", "9-10 vasos", "M√°s de 10 vasos"],
                help="Considera solo agua pura, no otras bebidas"
            )
            
            ejercicio_frecuencia = st.selectbox(
                "¬øCon qu√© frecuencia realizas ejercicio?",
                ["No hago ejercicio", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Todos los d√≠as"],
                help="Incluye cualquier tipo de actividad f√≠sica planificada"
            )
        
        with col2:
            peso_objetivo = st.selectbox(
                "¬øCu√°l es tu objetivo principal de peso?",
                ["Mantener mi peso actual", "Perder peso", "Ganar peso", "Ganar masa muscular", "Mejorar composici√≥n corporal"],
                help="Selecciona tu objetivo m√°s importante"
            )
            
            energia_nivel = st.selectbox(
                "¬øC√≥mo describir√≠as tu nivel de energ√≠a durante el d√≠a?",
                ["Muy bajo, siempre cansado", "Bajo, me canso f√°cil", "Normal, estable", "Alto, me siento activo", "Muy alto, lleno de energ√≠a"],
                help="Considera tu energ√≠a promedio en un d√≠a t√≠pico"
            )
            
            apetito_nivel = st.selectbox(
                "¬øC√≥mo describir√≠as tu apetito habitualmente?",
                ["Muy poco apetito", "Poco apetito", "Apetito normal", "Buen apetito", "Mucho apetito, siempre tengo hambre"],
                help="Piensa en tu sensaci√≥n de hambre promedio"
            )

        # Guardar en session state
        st.session_state.comidas_por_dia_actual = comidas_por_dia_actual
        st.session_state.agua_diaria = agua_diaria
        st.session_state.ejercicio_frecuencia = ejercicio_frecuencia
        st.session_state.peso_objetivo = peso_objetivo
        st.session_state.energia_nivel = energia_nivel
        st.session_state.apetito_nivel = apetito_nivel
        
        st.markdown('</div>', unsafe_allow_html=True)

    # GRUPO 2: FUENTES DE PROTE√çNA
    with st.expander("ü•© **GRUPO 2: FUENTES DE PROTE√çNA**", expanded=True):
        progress.progress(20)
        progress_text.text("Grupo 2 de 6: Fuentes de prote√≠na")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üçñ Prote√≠nas que consumes regularmente")
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### üêÑ Prote√≠nas animales")
            proteinas_animales = st.multiselect(
                "Selecciona las prote√≠nas animales que consumes:",
                ["Pollo", "Pavo", "Res", "Cerdo", "Pescado blanco", "Pescado azul", "Mariscos", 
                 "Huevos enteros", "Claras de huevo", "L√°cteos (leche, yogurt)", "Quesos", "Embutidos"],
                help="Marca todas las que consumes habitualmente"
            )
            
            frecuencia_proteina_animal = st.selectbox(
                "¬øCon qu√© frecuencia consumes prote√≠na animal?",
                ["Nunca", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Diariamente", "Varias veces al d√≠a"],
                help="Considera todas las prote√≠nas animales en conjunto"
            )
        
        with col2:
            st.markdown("#### üå± Prote√≠nas vegetales")
            proteinas_vegetales = st.multiselect(
                "Selecciona las prote√≠nas vegetales que consumes:",
                ["Frijoles", "Lentejas", "Garbanzos", "Quinoa", "Tofu", "Tempeh", "Seit√°n", 
                 "Frutos secos", "Semillas", "Prote√≠na en polvo vegetal", "Legumbres en general"],
                help="Marca todas las que consumes habitualmente"
            )
            
            frecuencia_proteina_vegetal = st.selectbox(
                "¬øCon qu√© frecuencia consumes prote√≠na vegetal?",
                ["Nunca", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Diariamente", "Varias veces al d√≠a"],
                help="Considera todas las prote√≠nas vegetales en conjunto"
            )

        st.markdown("### ü•§ Suplementos proteicos")
        suplementos_proteina = st.multiselect(
            "¬øUtilizas alg√∫n suplemento de prote√≠na?",
            ["Prote√≠na whey", "Prote√≠na case√≠na", "Prote√≠na vegetal en polvo", "Prote√≠na de huevo", 
             "Amino√°cidos BCAA", "Creatina", "No uso suplementos proteicos"],
            help="Selecciona todos los que uses regularmente"
        )

        # Guardar en session state
        st.session_state.proteinas_animales = proteinas_animales
        st.session_state.frecuencia_proteina_animal = frecuencia_proteina_animal
        st.session_state.proteinas_vegetales = proteinas_vegetales
        st.session_state.frecuencia_proteina_vegetal = frecuencia_proteina_vegetal
        st.session_state.suplementos_proteina = suplementos_proteina
        
        st.markdown('</div>', unsafe_allow_html=True)

    # GRUPO 3: FUENTES DE GRASA SALUDABLE
    with st.expander("ü•ë **GRUPO 3: FUENTES DE GRASA SALUDABLE**", expanded=True):
        progress.progress(30)
        progress_text.text("Grupo 3 de 6: Fuentes de grasa saludable")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### ü´í Grasas que incluyes en tu alimentaci√≥n")
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### ü•ë Grasas vegetales")
            grasas_vegetales = st.multiselect(
                "Selecciona las grasas vegetales que consumes:",
                ["Aguacate", "Aceite de oliva", "Aceite de coco", "Aceite de canola", "Frutos secos (nueces, almendras)", 
                 "Semillas (ch√≠a, linaza, girasol)", "Aceitunas", "Mantequilla de frutos secos", "Tahini"],
                help="Marca todas las que consumes habitualmente"
            )
            
            frecuencia_grasas_vegetales = st.selectbox(
                "¬øCon qu√© frecuencia consumes grasas vegetales?",
                ["Nunca", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Diariamente"],
                help="Considera todas las grasas vegetales en conjunto"
            )
        
        with col2:
            st.markdown("#### üêü Grasas animales")
            grasas_animales = st.multiselect(
                "Selecciona las grasas animales que consumes:",
                ["Pescado graso (salm√≥n, at√∫n, sardinas)", "Mantequilla", "Yema de huevo", 
                 "Grasa de carnes", "Ghee", "Aceite de pescado (suplemento)"],
                help="Marca todas las que consumes habitualmente"
            )
            
            frecuencia_grasas_animales = st.selectbox(
                "¬øCon qu√© frecuencia consumes grasas animales?",
                ["Nunca", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Diariamente"],
                help="Considera todas las grasas animales en conjunto"
            )

        # Guardar en session state
        st.session_state.grasas_vegetales = grasas_vegetales
        st.session_state.frecuencia_grasas_vegetales = frecuencia_grasas_vegetales
        st.session_state.grasas_animales = grasas_animales
        st.session_state.frecuencia_grasas_animales = frecuencia_grasas_animales
        
        st.markdown('</div>', unsafe_allow_html=True)

    # PREGUNTA SOBRE M√âTODOS DE COCCI√ìN (despu√©s del GRUPO 3, antes del GRUPO 4)
    with st.expander("üë®‚Äçüç≥ **M√âTODOS DE COCCI√ìN DISPONIBLES**", expanded=True):
        progress.progress(35)
        progress_text.text("M√©todos de cocci√≥n: Evaluando tus recursos culinarios")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üî• M√©todos de cocci√≥n que tienes disponibles")
        
        metodos_disponibles = st.multiselect(
            "¬øQu√© m√©todos de cocci√≥n tienes disponibles en casa? (multiselecci√≥n)",
            ["Hervido", "Al vapor", "A la plancha", "A la parrilla", "Salteado", "Frito", 
             "Horno convencional", "Microondas", "Olla lenta (slow cooker)", "Olla de presi√≥n", 
             "Air fryer", "Crudo", "Sofrito", "Guisado", "Wok", "Otro"],
            help="Selecciona todos los m√©todos que puedes usar en tu cocina"
        )
        
        if "Otro" in metodos_disponibles:
            otro_metodo = st.text_input(
                "Especifica otro m√©todo de cocci√≥n:",
                placeholder="Ej: Parrilla el√©ctrica, vaporera bamb√∫...",
                help="Describe el m√©todo que no est√° en la lista"
            )
            st.session_state.otro_metodo_coccion = otro_metodo
        
        # Segunda pregunta: m√©todos m√°s accesibles/pr√°cticos
        if metodos_disponibles:
            metodos_practicos = st.multiselect(
                "¬øCu√°les se te hacen m√°s accesibles/pr√°cticos para el d√≠a a d√≠a de tu plan? (multiselecci√≥n)",
                metodos_disponibles,  # Solo mostrar los que marc√≥ como disponibles
                help="De los m√©todos que tienes disponibles, ¬øcu√°les usas m√°s frecuentemente?"
            )
            st.session_state.metodos_practicos = metodos_practicos
        else:
            st.info("Primero selecciona los m√©todos disponibles para poder elegir los m√°s pr√°cticos")
            metodos_practicos = []

        # Guardar en session state
        st.session_state.metodos_disponibles = metodos_disponibles
        
        st.markdown('</div>', unsafe_allow_html=True)

    # GRUPO 4: CARBOHIDRATOS Y ENERG√çA
    with st.expander("üçû **GRUPO 4: CARBOHIDRATOS Y ENERG√çA**", expanded=True):
        progress.progress(45)
        progress_text.text("Grupo 4 de 6: Carbohidratos y energ√≠a")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üåæ Fuentes de carbohidratos que consumes")
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("#### üçû Cereales y granos")
            cereales_granos = st.multiselect(
                "Selecciona los cereales y granos que consumes:",
                ["Arroz blanco", "Arroz integral", "Avena", "Quinoa", "Pan blanco", "Pan integral", 
                 "Pasta", "Cereales de desayuno", "Amaranto", "Cebada", "Trigo sarraceno"],
                help="Marca todos los que consumes habitualmente"
            )
            
            frecuencia_cereales = st.selectbox(
                "¬øCon qu√© frecuencia consumes cereales y granos?",
                ["Nunca", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Diariamente", "Varias veces al d√≠a"],
                help="Considera todos los cereales y granos en conjunto"
            )
        
        with col2:
            st.markdown("#### ü•î Tub√©rculos y vegetales amil√°ceos")
            tuberculos = st.multiselect(
                "Selecciona los tub√©rculos que consumes:",
                ["Papa", "Camote/Boniato", "Yuca/Mandioca", "Pl√°tano macho", "Ma√≠z", 
                 "Calabaza", "Betabel", "Zanahoria"],
                help="Marca todos los que consumes habitualmente"
            )
            
            frecuencia_tuberculos = st.selectbox(
                "¬øCon qu√© frecuencia consumes tub√©rculos?",
                ["Nunca", "1-2 veces por semana", "3-4 veces por semana", "5-6 veces por semana", "Diariamente"],
                help="Considera todos los tub√©rculos en conjunto"
            )

        st.markdown("### üçé Frutas y vegetales")
        col1, col2 = st.columns(2)
        with col1:
            frutas_consumo = st.selectbox(
                "¬øCu√°ntas porciones de fruta consumes al d√≠a?",
                ["No como frutas", "1 porci√≥n", "2 porciones", "3 porciones", "4 o m√°s porciones"],
                help="Una porci√≥n = 1 fruta mediana o 1 taza de fruta picada"
            )
        
        with col2:
            vegetales_consumo = st.selectbox(
                "¬øCu√°ntas porciones de vegetales consumes al d√≠a?",
                ["No como vegetales", "1 porci√≥n", "2 porciones", "3 porciones", "4 o m√°s porciones"],
                help="Una porci√≥n = 1 taza de vegetales crudos o 1/2 taza cocidos"
            )

        # Guardar en session state
        st.session_state.cereales_granos = cereales_granos
        st.session_state.frecuencia_cereales = frecuencia_cereales
        st.session_state.tuberculos = tuberculos
        st.session_state.frecuencia_tuberculos = frecuencia_tuberculos
        st.session_state.frutas_consumo = frutas_consumo
        st.session_state.vegetales_consumo = vegetales_consumo
        
        st.markdown('</div>', unsafe_allow_html=True)

    # GRUPO 5: HIDRATACI√ìN Y BEBIDAS
    with st.expander("ü•§ **GRUPO 5: HIDRATACI√ìN Y BEBIDAS**", expanded=True):
        progress.progress(55)
        progress_text.text("Grupo 5 de 6: Hidrataci√≥n y bebidas")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üíß H√°bitos de hidrataci√≥n")
        
        col1, col2 = st.columns(2)
        with col1:
            agua_pura_consumo = st.selectbox(
                "¬øCu√°ntos litros de agua pura tomas al d√≠a?",
                ["Menos de 1 litro", "1-1.5 litros", "1.5-2 litros", "2-2.5 litros", "2.5-3 litros", "M√°s de 3 litros"],
                help="Solo agua pura, sin saborizantes"
            )
            
            bebidas_con_cafeina = st.multiselect(
                "¬øQu√© bebidas con cafe√≠na consumes?",
                ["Caf√© negro", "Caf√© con leche", "T√© verde", "T√© negro", "Bebidas energ√©ticas", 
                 "Refrescos de cola", "Chocolate caliente", "No consumo cafe√≠na"],
                help="Selecciona todas las que consumes habitualmente"
            )
        
        with col2:
            frecuencia_cafeina = st.selectbox(
                "¬øCon qu√© frecuencia consumes bebidas con cafe√≠na?",
                ["Nunca", "Ocasionalmente", "1 vez al d√≠a", "2-3 veces al d√≠a", "4 o m√°s veces al d√≠a"],
                help="Considera todas las bebidas con cafe√≠na juntas"
            )
            
            otras_bebidas = st.multiselect(
                "¬øQu√© otras bebidas consumes regularmente?",
                ["Jugos naturales", "Jugos procesados", "Refrescos/Sodas", "Bebidas deportivas", 
                 "Leche", "Leches vegetales", "Kombucha", "Agua con gas", "Infusiones sin cafe√≠na"],
                help="Selecciona todas las bebidas que tomes habitualmente"
            )

        st.markdown("### üç∑ Consumo de alcohol")
        consumo_alcohol = st.selectbox(
            "¬øConsumes bebidas alcoh√≥licas?",
            ["No consumo alcohol", "Ocasionalmente (1-2 veces al mes)", "1-2 veces por semana", 
             "3-4 veces por semana", "5-6 veces por semana", "Diariamente"],
            help="S√© honesto sobre tu consumo real de alcohol"
        )
        
        if consumo_alcohol != "No consumo alcohol":
            tipos_alcohol = st.multiselect(
                "¬øQu√© tipos de bebidas alcoh√≥licas prefieres?",
                ["Cerveza", "Vino tinto", "Vino blanco", "Destilados (tequila, whisky, etc.)", 
                 "C√≥cteles/Tragos", "Licores dulces"],
                help="Selecciona los tipos que consumes m√°s frecuentemente"
            )
            st.session_state.tipos_alcohol = tipos_alcohol

        # Guardar en session state
        st.session_state.agua_pura_consumo = agua_pura_consumo
        st.session_state.bebidas_con_cafeina = bebidas_con_cafeina
        st.session_state.frecuencia_cafeina = frecuencia_cafeina
        st.session_state.otras_bebidas = otras_bebidas
        st.session_state.consumo_alcohol = consumo_alcohol
        
        st.markdown('</div>', unsafe_allow_html=True)

    # GRUPO 6: SUPLEMENTOS Y PRODUCTOS ESPECIALES
    with st.expander("üíä **GRUPO 6: SUPLEMENTOS Y PRODUCTOS ESPECIALES**", expanded=True):
        progress.progress(65)
        progress_text.text("Grupo 6 de 6: Suplementos y productos especiales")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üß™ Suplementos nutricionales")
        
        col1, col2 = st.columns(2)
        with col1:
            usa_suplementos = st.radio(
                "¬øActualmente tomas suplementos nutricionales?",
                ["No tomo suplementos", "S√≠, tomo algunos", "S√≠, tomo varios", "S√≠, tomo muchos"],
                help="Incluye vitaminas, minerales, y otros suplementos"
            )
            
            if usa_suplementos != "No tomo suplementos":
                suplementos_actuales = st.multiselect(
                    "¬øQu√© suplementos tomas actualmente?",
                    ["Multivitam√≠nico", "Vitamina D", "Vitamina C", "Vitaminas del complejo B", 
                     "Omega 3", "Calcio", "Magnesio", "Zinc", "Hierro", "Probi√≥ticos", 
                     "Prote√≠na en polvo", "Creatina", "BCAA", "Glutamina", "Pre-entreno", 
                     "Quemadores de grasa", "Otros"],
                    help="Selecciona todos los que tomas regularmente"
                )
                st.session_state.suplementos_actuales = suplementos_actuales
        
        with col2:
            productos_especiales = st.multiselect(
                "¬øConsumes productos diet√©ticos especiales?",
                ["Productos sin gluten", "Productos sin lactosa", "Productos veganos", 
                 "Productos keto", "Productos light/diet", "Edulcorantes artificiales", 
                 "Sal de mar/rosa", "Vinagres especiales", "Aceites premium", "Superfoods"],
                help="Productos que compras espec√≠ficamente por sus caracter√≠sticas nutricionales"
            )
            
            frecuencia_productos_especiales = st.selectbox(
                "¬øCon qu√© frecuencia consumes productos diet√©ticos especiales?",
                ["Nunca", "Ocasionalmente", "1-2 veces por semana", "3-4 veces por semana", "Diariamente"],
                help="Considera todos los productos especiales en conjunto"
            )

        # Guardar en session state
        st.session_state.usa_suplementos = usa_suplementos
        st.session_state.productos_especiales = productos_especiales
        st.session_state.frecuencia_productos_especiales = frecuencia_productos_especiales
        
        st.markdown('</div>', unsafe_allow_html=True)

    # APARTADO: ACEITES Y GRASAS DE COCINA
    with st.expander("ü´í **APARTADO: ACEITES Y GRASAS DE COCINA**", expanded=True):
        progress.progress(70)
        progress_text.text("Apartado especial: Aceites y grasas de cocina")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üßÑ Aceites y grasas que usas para cocinar")
        
        col1, col2 = st.columns(2)
        with col1:
            aceites_cocina = st.multiselect(
                "¬øQu√© aceites usas para cocinar?",
                ["Aceite de oliva extra virgen", "Aceite de oliva regular", "Aceite de canola", 
                 "Aceite de girasol", "Aceite de coco", "Aceite de aguacate", "Aceite de s√©samo", 
                 "Mantequilla", "Ghee", "Manteca de cerdo", "Aceite en spray", "No uso aceites"],
                help="Selecciona todos los aceites que usas para cocinar"
            )
            
            preferencia_coccion = st.selectbox(
                "¬øCu√°l es tu aceite preferido para cocinar a altas temperaturas?",
                ["Aceite de coco", "Aceite de aguacate", "Ghee", "Aceite de canola", 
                 "Aceite de girasol alto oleico", "Mantequilla", "No cocino a altas temperaturas"],
                help="Para fre√≠r, saltear o cocinar en el horno"
            )
        
        with col2:
            aceites_ensalada = st.multiselect(
                "¬øQu√© aceites usas para ensaladas o en crudo?",
                ["Aceite de oliva extra virgen", "Aceite de linaza", "Aceite de nuez", 
                 "Aceite de s√©samo", "Aceite de aguacate", "Vinagre bals√°mico", 
                 "Aceite de coco virgen", "No uso aceites en crudo"],
                help="Aceites que usas sin cocinar, en ensaladas o aderezos"
            )
            
            cantidad_aceite_dia = st.selectbox(
                "¬øAproximadamente cu√°nto aceite usas al d√≠a?",
                ["No uso aceite", "1-2 cucharaditas", "1-2 cucharadas", "3-4 cucharadas", "M√°s de 4 cucharadas"],
                help="Considera todo el aceite que usas para cocinar y aderezar"
            )

        # Guardar en session state
        st.session_state.aceites_cocina = aceites_cocina
        st.session_state.preferencia_coccion = preferencia_coccion
        st.session_state.aceites_ensalada = aceites_ensalada
        st.session_state.cantidad_aceite_dia = cantidad_aceite_dia
        
        st.markdown('</div>', unsafe_allow_html=True)

    # APARTADO: ALERGIAS E INTOLERANCIAS
    with st.expander("‚ö†Ô∏è **APARTADO: ALERGIAS E INTOLERANCIAS**", expanded=True):
        progress.progress(75)
        progress_text.text("Apartado especial: Alergias e intolerancias")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üö® Alergias alimentarias")
        
        tiene_alergias = st.radio(
            "¬øTienes alergias alimentarias diagnosticadas?",
            ["No tengo alergias", "S√≠, tengo alergias leves", "S√≠, tengo alergias severas"],
            help="Las alergias pueden causar reacciones graves, incluso peligrosas"
        )
        
        if tiene_alergias != "No tengo alergias":
            alergias_especificas = st.multiselect(
                "¬øA qu√© alimentos eres al√©rgico?",
                ["Frutos secos (nueces, almendras, etc.)", "Man√≠/Cacahuate", "Mariscos", "Pescado", 
                 "Huevos", "Leche/L√°cteos", "Soja", "Trigo/Gluten", "Semillas de s√©samo", 
                 "Frutas espec√≠ficas", "Otros"],
                help="Selecciona todos los alimentos que te causan reacciones al√©rgicas"
            )
            
            if "Otros" in alergias_especificas:
                otras_alergias = st.text_area(
                    "Especifica otras alergias:",
                    placeholder="Describe otros alimentos o sustancias que te causen alergia",
                    help="S√© espec√≠fico para crear un plan seguro"
                )
                st.session_state.otras_alergias = otras_alergias
            
            st.session_state.alergias_especificas = alergias_especificas

        st.markdown("### ü§¢ Intolerancias alimentarias")
        
        tiene_intolerancias = st.radio(
            "¬øTienes intolerancias alimentarias?",
            ["No tengo intolerancias", "S√≠, tengo intolerancias leves", "S√≠, tengo intolerancias severas"],
            help="Las intolerancias causan malestar digestivo pero no son peligrosas"
        )
        
        if tiene_intolerancias != "No tengo intolerancias":
            intolerancias_especificas = st.multiselect(
                "¬øA qu√© alimentos eres intolerante?",
                ["Lactosa", "Gluten", "Fructosa", "FODMAP", "Histamina", "Cafe√≠na", 
                 "Alcohol", "Edulcorantes artificiales", "Glutamato monos√≥dico", "Otros"],
                help="Selecciona todos los alimentos que te causan malestar digestivo"
            )
            
            if "Otros" in intolerancias_especificas:
                otras_intolerancias = st.text_area(
                    "Especifica otras intolerancias:",
                    placeholder="Describe otros alimentos que te causen malestar",
                    help="Incluye s√≠ntomas si los conoces"
                )
                st.session_state.otras_intolerancias = otras_intolerancias
            
            st.session_state.intolerancias_especificas = intolerancias_especificas

        # Guardar en session state
        st.session_state.tiene_alergias = tiene_alergias
        st.session_state.tiene_intolerancias = tiene_intolerancias
        
        st.markdown('</div>', unsafe_allow_html=True)

    # APARTADO: PREFERENCIAS ALIMENTARIAS
    with st.expander("üòã **APARTADO: PREFERENCIAS ALIMENTARIAS**", expanded=True):
        progress.progress(80)
        progress_text.text("Apartado especial: Preferencias alimentarias")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üéØ Tus gustos y preferencias")
        
        col1, col2 = st.columns(2)
        with col1:
            sabores_favoritos = st.multiselect(
                "¬øQu√© sabores disfrutas m√°s?",
                ["Dulce", "Salado", "√Åcido/Agrio", "Amargo", "Picante", "Especiado", 
                 "Ahumado", "Umami", "Suave/Neutro"],
                help="Selecciona todos los sabores que realmente disfrutas"
            )
            
            texturas_favoritas = st.multiselect(
                "¬øQu√© texturas prefieres en los alimentos?",
                ["Crujiente", "Suave", "Cremosa", "Masticable", "L√≠quida", "Gelatinosa", 
                 "Fibrosa", "Aireada/Espumosa"],
                help="Piensa en las texturas que m√°s te satisfacen"
            )
            
            temperaturas_preferidas = st.multiselect(
                "¬øA qu√© temperatura prefieres los alimentos?",
                ["Muy caliente", "Caliente", "Tibia", "Temperatura ambiente", "Fr√≠a", "Helada"],
                help="Considera tanto bebidas como comidas"
            )
        
        with col2:
            comidas_comfort = st.text_area(
                "¬øCu√°les son tus 3 comidas favoritas de todos los tiempos?",
                placeholder="Ej: Pizza margarita, tacos al pastor, helado de chocolate...",
                help="Esas comidas que siempre te hacen feliz"
            )
            
            alimentos_no_gustan = st.text_area(
                "¬øHay alimentos que definitivamente NO te gustan?",
                placeholder="Ej: Br√≥coli, h√≠gado, pescado, comida muy picante...",
                help="Alimentos que evitas por gusto, no por alergia"
            )
            
            curiosidad_alimentaria = st.selectbox(
                "¬øQu√© tan abierto eres a probar alimentos nuevos?",
                ["Muy cerrado, solo como lo conocido", "Algo cerrado, rara vez pruebo cosas nuevas", 
                 "Neutro, a veces pruebo cosas nuevas", "Abierto, me gusta probar cosas nuevas", 
                 "Muy abierto, siempre busco nuevos sabores"],
                help="Esto nos ayuda a saber qu√© tan variado puede ser tu plan"
            )

        # Guardar en session state
        st.session_state.sabores_favoritos = sabores_favoritos
        st.session_state.texturas_favoritas = texturas_favoritas
        st.session_state.temperaturas_preferidas = temperaturas_preferidas
        st.session_state.comidas_comfort = comidas_comfort
        st.session_state.alimentos_no_gustan = alimentos_no_gustan
        st.session_state.curiosidad_alimentaria = curiosidad_alimentaria
        
        st.markdown('</div>', unsafe_allow_html=True)

    # APARTADO: ANTOJOS Y PATRONES EMOCIONALES
    with st.expander("üç´ **APARTADO: ANTOJOS Y PATRONES EMOCIONALES**", expanded=True):
        progress.progress(85)
        progress_text.text("Apartado especial: Antojos y patrones emocionales")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üß† Antojos y alimentaci√≥n emocional")
        
        col1, col2 = st.columns(2)
        with col1:
            frecuencia_antojos = st.selectbox(
                "¬øCon qu√© frecuencia tienes antojos de comida?",
                ["Nunca o rara vez", "1-2 veces por semana", "3-4 veces por semana", 
                 "Diariamente", "Varias veces al d√≠a"],
                help="Antojos = deseos intensos de comer algo espec√≠fico"
            )
            
            tipos_antojos = st.multiselect(
                "¬øQu√© tipo de alimentos se te antojan m√°s?",
                ["Dulces (chocolate, postres)", "Salados (papas, snacks)", "Grasosos (pizza, hamburguesas)", 
                 "Carbohidratos (pan, pasta)", "Bebidas azucaradas", "Comida r√°pida", 
                 "Helados", "Frutas", "No tengo antojos espec√≠ficos"],
                help="Selecciona los tipos de comida que m√°s se te antojan"
            )
            
            horarios_antojos = st.multiselect(
                "¬øA qu√© horas del d√≠a tienes m√°s antojos?",
                ["Ma√±ana", "Media ma√±ana", "Mediod√≠a", "Tarde", "Noche", "Madrugada", 
                 "No tengo horarios espec√≠ficos"],
                help="Identifica si hay patrones en tus antojos"
            )
        
        with col2:
            triggers_emocionales = st.multiselect(
                "¬øEn qu√© situaciones comes por emociones?",
                ["Cuando estoy estresado", "Cuando estoy triste", "Cuando estoy ansioso", 
                 "Cuando estoy aburrido", "Cuando estoy feliz/celebrando", 
                 "Cuando estoy cansado", "Por costumbre/rutina", "No como por emociones"],
                help="Identifica tus triggers emocionales para comer"
            )
            
            control_antojos = st.selectbox(
                "¬øQu√© tan f√°cil te resulta resistir los antojos?",
                ["Muy f√°cil, casi siempre resisto", "F√°cil, usualmente resisto", 
                 "Dif√≠cil, a veces cedo", "Muy dif√≠cil, casi siempre cedo", 
                 "Imposible, siempre cedo a los antojos"],
                help="S√© honesto sobre tu autocontrol actual"
            )
            
            estrategias_antojos = st.text_area(
                "¬øQu√© estrategias has usado para manejar antojos?",
                placeholder="Ej: Beber agua, distraerme, comer fruta, hacer ejercicio...",
                help="Comparte qu√© te ha funcionado o no"
            )

        # Guardar en session state
        st.session_state.frecuencia_antojos = frecuencia_antojos
        st.session_state.tipos_antojos = tipos_antojos
        st.session_state.horarios_antojos = horarios_antojos
        st.session_state.triggers_emocionales = triggers_emocionales
        st.session_state.control_antojos = control_antojos
        st.session_state.estrategias_antojos = estrategias_antojos
        
        st.markdown('</div>', unsafe_allow_html=True)

    # BLOQUE FINAL: INFORMACI√ìN ADICIONAL Y CONTEXTO
    with st.expander("üìù **INFORMACI√ìN ADICIONAL Y CONTEXTO**", expanded=True):
        progress.progress(90)
        progress_text.text("Informaci√≥n adicional: Completando tu perfil")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        st.markdown("### üè† Contexto personal y familiar")
        
        col1, col2 = st.columns(2)
        with col1:
            situacion_familiar = st.selectbox(
                "¬øCu√°l es tu situaci√≥n familiar?",
                ["Vivo solo", "Vivo en pareja", "Vivo con familia (padres/hermanos)", 
                 "Tengo hijos peque√±os", "Tengo familia numerosa", "Vivo con roommates"],
                help="Esto afecta la planificaci√≥n de comidas"
            )
            
            quien_cocina = st.selectbox(
                "¬øQui√©n cocina principalmente en tu hogar?",
                ["Yo cocino todo", "Cocino principalmente yo", "Compartimos las tareas", 
                 "Cocina principalmente otra persona", "Otra persona cocina todo", "Comemos fuera/delivery"],
                help="Necesitamos saber qui√©n preparar√° las comidas"
            )
            
            presupuesto_comida = st.selectbox(
                "¬øC√≥mo describir√≠as tu presupuesto para alimentaci√≥n?",
                ["Muy limitado", "Limitado", "Moderado", "Holgado", "Sin limitaciones"],
                help="Esto nos ayuda a sugerir opciones adecuadas"
            )
        
        with col2:
            trabajo_horarios = st.selectbox(
                "¬øC√≥mo son tus horarios de trabajo/estudio?",
                ["Horario fijo est√°ndar (9-5)", "Horario fijo no est√°ndar", "Turnos rotativos", 
                 "Horario flexible", "Trabajo desde casa", "Estudiante", "Sin horario fijo"],
                help="Los horarios afectan cu√°ndo y c√≥mo puedes comer"
            )
            
            eventos_sociales = st.selectbox(
                "¬øCon qu√© frecuencia tienes eventos sociales que involucran comida?",
                ["Nunca o rara vez", "1-2 veces al mes", "1-2 veces por semana", 
                 "3-4 veces por semana", "Casi diariamente"],
                help="Cenas de trabajo, fiestas, reuniones familiares, etc."
            )
            
            viajes_frecuencia = st.selectbox(
                "¬øCon qu√© frecuencia viajas o comes fuera de casa?",
                ["Nunca", "Ocasionalmente", "1-2 veces por mes", "Semanalmente", "Muy frecuentemente"],
                help="Viajes de trabajo, vacaciones, etc."
            )

        st.markdown("### üéØ Objetivos y motivaciones espec√≠ficas")
        
        objetivo_principal_detallado = st.selectbox(
            "¬øCu√°l es tu objetivo principal m√°s espec√≠fico?",
            ["Perder grasa corporal manteniendo m√∫sculo", "Ganar masa muscular", "Mejorar energ√≠a y bienestar", 
             "Controlar una condici√≥n m√©dica", "Mejorar rendimiento deportivo", "Establecer h√°bitos saludables", 
             "Reducir inflamaci√≥n", "Mejorar digesti√≥n", "Longevidad y antienvejecimiento"],
            help="S√© espec√≠fico sobre lo que m√°s quieres lograr"
        )
        
        razon_cambio = st.text_area(
            "¬øQu√© te motiv√≥ a buscar ayuda nutricional ahora?",
            placeholder="Ej: Me siento sin energ√≠a, quiero bajar de peso, tengo problemas digestivos...",
            help="Cu√©ntanos qu√© te trajo hasta aqu√≠"
        )
        
        experiencias_previas = st.text_area(
            "¬øHas seguido planes nutricionales antes? ¬øC√≥mo fue tu experiencia?",
            placeholder="Ej: Prob√© keto pero no me funcion√≥, cont√© calor√≠as pero era muy tedioso...",
            help="Esto nos ayuda a evitar estrategias que no te funcionaron"
        )

        # Guardar en session state
        st.session_state.situacion_familiar = situacion_familiar
        st.session_state.quien_cocina = quien_cocina
        st.session_state.presupuesto_comida = presupuesto_comida
        st.session_state.trabajo_horarios = trabajo_horarios
        st.session_state.eventos_sociales = eventos_sociales
        st.session_state.viajes_frecuencia = viajes_frecuencia
        st.session_state.objetivo_principal_detallado = objetivo_principal_detallado
        st.session_state.razon_cambio = razon_cambio
        st.session_state.experiencias_previas = experiencias_previas
        
        st.markdown('</div>', unsafe_allow_html=True)

    # RESULTADO FINAL: An√°lisis completo de patrones alimentarios
    with st.expander("üìà **RESULTADO FINAL: Tu Perfil Alimentario Completo**", expanded=True):
        progress.progress(100)
        progress_text.text("An√°lisis completo: Generando tu perfil alimentario personalizado")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        
        st.markdown("### üéØ Tu Perfil Alimentario Personalizado")
        
        # Crear resumen del perfil por grupos
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë§ Grupo 1: Informaci√≥n B√°sica")
            st.write(f"‚Ä¢ **Comidas por d√≠a:** {st.session_state.get('comidas_por_dia_actual', 'No especificado')}")
            st.write(f"‚Ä¢ **Objetivo principal:** {st.session_state.get('peso_objetivo', 'No especificado')}")
            st.write(f"‚Ä¢ **Nivel de energ√≠a:** {st.session_state.get('energia_nivel', 'No especificado')}")
            st.write(f"‚Ä¢ **Ejercicio:** {st.session_state.get('ejercicio_frecuencia', 'No especificado')}")
            
            st.markdown("#### ü•© Grupo 2: Prote√≠nas")
            if st.session_state.get('proteinas_animales'):
                proteinas_lista = st.session_state.get('proteinas_animales', [])
                st.write(f"‚Ä¢ **Prote√≠nas animales:** {', '.join(proteinas_lista[:3])}{'...' if len(proteinas_lista) > 3 else ''}")
            if st.session_state.get('proteinas_vegetales'):
                proteinas_veg_lista = st.session_state.get('proteinas_vegetales', [])
                st.write(f"‚Ä¢ **Prote√≠nas vegetales:** {', '.join(proteinas_veg_lista[:3])}{'...' if len(proteinas_veg_lista) > 3 else ''}")
            
            st.markdown("#### ü•ë Grupo 3: Grasas Saludables")
            if st.session_state.get('grasas_vegetales'):
                grasas_veg_lista = st.session_state.get('grasas_vegetales', [])
                st.write(f"‚Ä¢ **Grasas vegetales:** {', '.join(grasas_veg_lista[:3])}{'...' if len(grasas_veg_lista) > 3 else ''}")
            if st.session_state.get('grasas_animales'):
                grasas_an_lista = st.session_state.get('grasas_animales', [])
                st.write(f"‚Ä¢ **Grasas animales:** {', '.join(grasas_an_lista[:3])}{'...' if len(grasas_an_lista) > 3 else ''}")
        
        with col2:
            st.markdown("#### üçû Grupo 4: Carbohidratos")
            if st.session_state.get('cereales_granos'):
                cereales_lista = st.session_state.get('cereales_granos', [])
                st.write(f"‚Ä¢ **Cereales:** {', '.join(cereales_lista[:3])}{'...' if len(cereales_lista) > 3 else ''}")
            st.write(f"‚Ä¢ **Frutas:** {st.session_state.get('frutas_consumo', 'No especificado')}")
            st.write(f"‚Ä¢ **Vegetales:** {st.session_state.get('vegetales_consumo', 'No especificado')}")
            
            st.markdown("#### ü•§ Grupo 5: Hidrataci√≥n")
            st.write(f"‚Ä¢ **Agua diaria:** {st.session_state.get('agua_pura_consumo', 'No especificado')}")
            st.write(f"‚Ä¢ **Cafe√≠na:** {st.session_state.get('frecuencia_cafeina', 'No especificado')}")
            st.write(f"‚Ä¢ **Alcohol:** {st.session_state.get('consumo_alcohol', 'No especificado')}")
            
            st.markdown("#### üíä Grupo 6: Suplementos")
            st.write(f"‚Ä¢ **Usa suplementos:** {st.session_state.get('usa_suplementos', 'No especificado')}")
            st.write(f"‚Ä¢ **Productos especiales:** {st.session_state.get('frecuencia_productos_especiales', 'No especificado')}")

        # Secci√≥n de m√©todos de cocci√≥n
        st.markdown("#### üë®‚Äçüç≥ M√©todos de Cocci√≥n")
        if st.session_state.get('metodos_disponibles'):
            metodos_lista = st.session_state.get('metodos_disponibles', [])
            st.write(f"‚Ä¢ **Disponibles:** {', '.join(metodos_lista[:5])}{'...' if len(metodos_lista) > 5 else ''}")
        if st.session_state.get('metodos_practicos'):
            metodos_prac_lista = st.session_state.get('metodos_practicos', [])
            st.write(f"‚Ä¢ **M√°s pr√°cticos:** {', '.join(metodos_prac_lista[:3])}{'...' if len(metodos_prac_lista) > 3 else ''}")

        # Restricciones importantes
        if (st.session_state.get('tiene_alergias') and st.session_state.get('tiene_alergias') != "No tengo alergias") or (st.session_state.get('tiene_intolerancias') and st.session_state.get('tiene_intolerancias') != "No tengo intolerancias"):
            st.markdown("#### ‚ö†Ô∏è Restricciones Importantes")
            if st.session_state.get('tiene_alergias') and st.session_state.get('tiene_alergias') != "No tengo alergias":
                st.warning(f"**Alergias:** {st.session_state.get('tiene_alergias')}")
                if st.session_state.get('alergias_especificas'):
                    alergias_lista = st.session_state.get('alergias_especificas', [])
                    st.write(f"‚Ä¢ **Espec√≠ficas:** {', '.join(alergias_lista)}")
            
            if st.session_state.get('tiene_intolerancias') and st.session_state.get('tiene_intolerancias') != "No tengo intolerancias":
                st.info(f"**Intolerancias:** {st.session_state.get('tiene_intolerancias')}")
                if st.session_state.get('intolerancias_especificas'):
                    intol_lista = st.session_state.get('intolerancias_especificas', [])
                    st.write(f"‚Ä¢ **Espec√≠ficas:** {', '.join(intol_lista)}")

        # Preferencias y antojos
        st.markdown("### üòã Patrones de Preferencias y Antojos")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.session_state.get('sabores_favoritos'):
                sabores_lista = st.session_state.get('sabores_favoritos', [])
                st.write(f"‚Ä¢ **Sabores favoritos:** {', '.join(sabores_lista)}")
            if st.session_state.get('comidas_comfort'):
                comidas_text = st.session_state.get('comidas_comfort', '')
                st.write(f"‚Ä¢ **Comidas favoritas:** {comidas_text[:100]}{'...' if len(comidas_text) > 100 else ''}")
            st.write(f"‚Ä¢ **Curiosidad alimentaria:** {st.session_state.get('curiosidad_alimentaria', 'No especificado')}")
        
        with col2:
            st.write(f"‚Ä¢ **Frecuencia antojos:** {st.session_state.get('frecuencia_antojos', 'No especificado')}")
            if st.session_state.get('tipos_antojos') and "No tengo antojos espec√≠ficos" not in st.session_state.get('tipos_antojos', []):
                antojos_lista = st.session_state.get('tipos_antojos', [])
                st.write(f"‚Ä¢ **Tipos de antojos:** {', '.join(antojos_lista[:3])}{'...' if len(antojos_lista) > 3 else ''}")
            st.write(f"‚Ä¢ **Control antojos:** {st.session_state.get('control_antojos', 'No especificado')}")

        # Contexto personal
        st.markdown("### üè† Contexto Personal")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"‚Ä¢ **Situaci√≥n familiar:** {st.session_state.get('situacion_familiar', 'No especificado')}")
            st.write(f"‚Ä¢ **Qui√©n cocina:** {st.session_state.get('quien_cocina', 'No especificado')}")
            st.write(f"‚Ä¢ **Presupuesto:** {st.session_state.get('presupuesto_comida', 'No especificado')}")
        
        with col2:
            st.write(f"‚Ä¢ **Horarios trabajo:** {st.session_state.get('trabajo_horarios', 'No especificado')}")
            st.write(f"‚Ä¢ **Eventos sociales:** {st.session_state.get('eventos_sociales', 'No especificado')}")
            st.write(f"‚Ä¢ **Objetivo espec√≠fico:** {st.session_state.get('objetivo_principal_detallado', 'No especificado')}")

        # Recomendaciones personalizadas
        st.markdown("### üí° Recomendaciones Personalizadas Iniciales")
        
        # An√°lisis b√°sico basado en las respuestas
        recomendaciones = []
        
        if st.session_state.get('agua_pura_consumo') in ["Menos de 1 litro", "1-1.5 litros"]:
            recomendaciones.append("üíß **Hidrataci√≥n:** Incrementar el consumo de agua pura gradualmente hasta alcanzar 2-2.5 litros diarios.")
        
        if st.session_state.get('vegetales_consumo') in ["No como vegetales", "1 porci√≥n"]:
            recomendaciones.append("ü•¨ **Vegetales:** Incorporar m√°s vegetales variados, comenzando con los que m√°s te gusten.")
        
        if (st.session_state.get('frecuencia_antojos') in ["Diariamente", "Varias veces al d√≠a"]) and (st.session_state.get('control_antojos') in ["Muy dif√≠cil, casi siempre cedo", "Imposible, siempre cedo a los antojos"]):
            recomendaciones.append("üß† **Antojos:** Desarrollar estrategias espec√≠ficas para manejar antojos, incluyendo alternativas saludables.")
        
        if st.session_state.get('ejercicio_frecuencia') == "No hago ejercicio":
            recomendaciones.append("üèÉ **Actividad:** Incorporar actividad f√≠sica gradual que complemente el plan nutricional.")
        
        if st.session_state.get('metodos_disponibles') and len(st.session_state.get('metodos_disponibles', [])) >= 5:
            recomendaciones.append("üë®‚Äçüç≥ **Cocina:** Aprovechar la variedad de m√©todos de cocci√≥n disponibles para crear m√°s opciones saludables.")
        
        if not recomendaciones:
            recomendaciones.append("‚úÖ **Perfil balanceado:** Tu perfil muestra buenos h√°bitos base. Enfocaremos en optimizaci√≥n y personalizaci√≥n.")
        
        for i, rec in enumerate(recomendaciones, 1):
            st.write(f"{i}. {rec}")

        st.success(f"""
        ### ‚úÖ An√°lisis de patrones alimentarios completado exitosamente
        
        **Tu perfil nutricional personalizado est√° listo** y incluye informaci√≥n detallada sobre:
        - 6 grupos alimentarios principales
        - M√©todos de cocci√≥n disponibles y preferidos  
        - Restricciones, alergias e intolerancias
        - Patrones de preferencias y antojos
        - Contexto personal y familiar
        
        **Este an√°lisis integral permitir√° crear un plan nutricional completamente adaptado** 
        a tu estilo de vida, preferencias y necesidades espec√≠ficas.
        
        La informaci√≥n ser√° enviada a nuestro equipo de nutrici√≥n para desarrollar tu plan personalizado.
        """)

        st.markdown('</div>', unsafe_allow_html=True)

    # RESULTADO FINAL: An√°lisis de patrones alimentarios
    with st.expander("üìà **RESULTADO FINAL: Tu Perfil Alimentario Personalizado**", expanded=True):
        progress.progress(100)
        progress_text.text("An√°lisis completo: Generando tu perfil alimentario personalizado")

        st.markdown('<div class="content-card">', unsafe_allow_html=True)
        
        st.markdown("### üéØ Tu Perfil Alimentario Personalizado")
        
        # Crear resumen del perfil
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üë§ Perfil Personal")
            st.write(f"‚Ä¢ **Nombre:** {nombre}")
            st.write(f"‚Ä¢ **Edad:** {edad} a√±os")
            st.write(f"‚Ä¢ **Sexo:** {sexo}")
            st.write(f"‚Ä¢ **Origen cultural:** {origen_cultural if origen_cultural else 'No especificado'}")
            
            st.markdown("#### ü•ó Preferencias Principales")
            if sabores_preferidos:
                st.write(f"‚Ä¢ **Sabores favoritos:** {', '.join(sabores_preferidos)}")
            if texturas_preferidas:
                st.write(f"‚Ä¢ **Texturas preferidas:** {', '.join(texturas_preferidas)}")
            if patron_dietetico != "Ninguno en particular":
                st.write(f"‚Ä¢ **Patr√≥n diet√©tico:** {patron_dietetico}")
                if motivacion_patron:
                    st.write(f"‚Ä¢ **Motivaci√≥n:** {motivacion_patron}")
        
        with col2:
            st.markdown("#### ‚è∞ Patrones Temporales")
            st.write(f"‚Ä¢ **Comidas por d√≠a:** {comidas_por_dia}")
            st.write(f"‚Ä¢ **Desayuno:** {horario_desayuno}")
            st.write(f"‚Ä¢ **Almuerzo:** {horario_almuerzo}")
            st.write(f"‚Ä¢ **Cena:** {horario_cena}")
            st.write(f"‚Ä¢ **Frecuencia de snacks:** {snacks_frecuencia}")
            
            st.markdown("#### üë®‚Äçüç≥ Habilidades Culinarias")
            st.write(f"‚Ä¢ **Nivel de cocina:** {nivel_cocina}")
            st.write(f"‚Ä¢ **Tiempo disponible:** {tiempo_cocinar_dia}")
            st.write(f"‚Ä¢ **Frecuencia cocina casa:** {frecuencia_cocina_casa}")

        # An√°lisis de restricciones
        if tiene_alergias != "No":
            st.markdown("#### ‚ö†Ô∏è Restricciones Importantes")
            st.warning(f"**Alergias/Intolerancias:** {tiene_alergias}")
            if alergias_especificas:
                st.write(f"‚Ä¢ **Detalles:** {alergias_especificas}")

        # Recomendaciones personalizadas basadas en las respuestas
        st.markdown("### üí° Recomendaciones Personalizadas")
        
        # An√°lisis del nivel de cocina para recomendaciones
        if nivel_cocina.startswith("Principiante"):
            recomendacion_cocina = "Enf√≥cate en recetas simples de 3-5 ingredientes. Considera meal prep b√°sico los fines de semana."
        elif nivel_cocina.startswith("B√°sico"):
            recomendacion_cocina = "Puedes explorar t√©cnicas nuevas gradualmente. Ideal para batch cooking y preparaciones vers√°tiles."
        elif nivel_cocina.startswith("Intermedio"):
            recomendacion_cocina = "Tienes base s√≥lida para experimentar con sabores internacionales y t√©cnicas m√°s avanzadas."
        else:
            recomendacion_cocina = "Tu nivel avanzado te permite crear platos complejos. Considera explorar cocina molecular o t√©cnicas especializadas."

        # An√°lisis del tiempo disponible
        if tiempo_cocinar_dia == "Menos de 15 minutos":
            recomendacion_tiempo = "Prioriza meal prep, alimentos pre-cortados y t√©cnicas de cocci√≥n r√°pida como salteados."
        elif tiempo_cocinar_dia == "15-30 minutos":
            recomendacion_tiempo = "Tiempo ideal para platos balanceados. Una olla/sart√©n puede ser tu mejor estrategia."
        else:
            recomendacion_tiempo = "Tienes flexibilidad para explorar t√©cnicas que requieren m√°s tiempo como guisos, horneados o fermentaciones."

        # Mostrar recomendaciones
        col1, col2 = st.columns(2)
        with col1:
            st.info(f"""
            **üíª Recomendaci√≥n por nivel de cocina:**
            {recomendacion_cocina}
            """)
        with col2:
            st.info(f"""
            **‚è±Ô∏è Recomendaci√≥n por tiempo disponible:**
            {recomendacion_tiempo}
            """)

        # Objetivos y pr√≥ximos pasos
        st.markdown("### üéØ Pr√≥ximos Pasos Recomendados")
        
        objetivos_texto = ""
        if objetivo_principal == "Perder peso":
            objetivos_texto = "Enfoque en preparaciones bajas en calor√≠as pero satisfactorias, control de porciones y planificaci√≥n de comidas."
        elif objetivo_principal == "Ganar peso/m√∫sculo":
            objetivos_texto = "Prioriza alimentos densos en nutrientes, aumenta frecuencia de comidas y incluye snacks nutritivos."
        elif objetivo_principal == "Mejorar energ√≠a y bienestar":
            objetivos_texto = "Enf√≥cate en alimentos integrales, hidrataci√≥n adecuada y horarios regulares de comida."
        else:
            objetivos_texto = "Plan balanceado enfocado en variedad nutricional y sostenibilidad a largo plazo."

        st.success(f"""
        ### ‚úÖ An√°lisis completado exitosamente
        
        **Tu objetivo principal:** {objetivo_principal}
        
        **Estrategia recomendada:** {objetivos_texto}
        
        **Nivel de personalizaci√≥n:** Alto - basado en {len([x for x in [sabores_preferidos, texturas_preferidas, patron_dietetico, nivel_cocina] if x])} factores clave analizados.
        """)

        st.markdown('</div>', unsafe_allow_html=True)

# Construir resumen completo para email
def crear_resumen_email():
    resumen = f"""
=====================================
CUESTIONARIO PATRONES ALIMENTARIOS MUPAI
=====================================
Generado: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Sistema: MUPAI v2.0 - Muscle Up Performance Assessment Intelligence

=====================================
DATOS DEL CLIENTE:
=====================================
- Nombre completo: {st.session_state.get('nombre', 'No especificado')}
- Edad: {st.session_state.get('edad', 'No especificado')} a√±os
- Sexo: {st.session_state.get('sexo', 'No especificado')}
- Tel√©fono: {st.session_state.get('telefono', 'No especificado')}
- Email: {st.session_state.get('email_cliente', 'No especificado')}
- Fecha evaluaci√≥n: {st.session_state.get('fecha_llenado', 'No especificado')}

=====================================
GRUPO 1: INFORMACI√ìN B√ÅSICA NUTRICIONAL
=====================================
- Comidas por d√≠a actual: {st.session_state.get('comidas_por_dia_actual', 'No especificado')}
- Agua diaria: {st.session_state.get('agua_diaria', 'No especificado')}
- Frecuencia ejercicio: {st.session_state.get('ejercicio_frecuencia', 'No especificado')}
- Objetivo de peso: {st.session_state.get('peso_objetivo', 'No especificado')}
- Nivel de energ√≠a: {st.session_state.get('energia_nivel', 'No especificado')}
- Nivel de apetito: {st.session_state.get('apetito_nivel', 'No especificado')}

=====================================
GRUPO 2: FUENTES DE PROTE√çNA
=====================================
- Prote√≠nas animales: {', '.join(st.session_state.get('proteinas_animales', [])) if st.session_state.get('proteinas_animales') else 'No especificado'}
- Frecuencia prote√≠na animal: {st.session_state.get('frecuencia_proteina_animal', 'No especificado')}
- Prote√≠nas vegetales: {', '.join(st.session_state.get('proteinas_vegetales', [])) if st.session_state.get('proteinas_vegetales') else 'No especificado'}
- Frecuencia prote√≠na vegetal: {st.session_state.get('frecuencia_proteina_vegetal', 'No especificado')}
- Suplementos de prote√≠na: {', '.join(st.session_state.get('suplementos_proteina', [])) if st.session_state.get('suplementos_proteina') else 'No especificado'}

=====================================
GRUPO 3: FUENTES DE GRASA SALUDABLE
=====================================
- Grasas vegetales: {', '.join(st.session_state.get('grasas_vegetales', [])) if st.session_state.get('grasas_vegetales') else 'No especificado'}
- Frecuencia grasas vegetales: {st.session_state.get('frecuencia_grasas_vegetales', 'No especificado')}
- Grasas animales: {', '.join(st.session_state.get('grasas_animales', [])) if st.session_state.get('grasas_animales') else 'No especificado'}
- Frecuencia grasas animales: {st.session_state.get('frecuencia_grasas_animales', 'No especificado')}

=====================================
M√âTODOS DE COCCI√ìN (DESPU√âS GRUPO 3)
=====================================
- M√©todos disponibles: {', '.join(st.session_state.get('metodos_disponibles', [])) if st.session_state.get('metodos_disponibles') else 'No especificado'}
- M√©todos m√°s pr√°cticos: {', '.join(st.session_state.get('metodos_practicos', [])) if st.session_state.get('metodos_practicos') else 'No especificado'}
- Otro m√©todo especificado: {st.session_state.get('otro_metodo_coccion', 'No especificado')}

=====================================
GRUPO 4: CARBOHIDRATOS Y ENERG√çA
=====================================
- Cereales y granos: {', '.join(st.session_state.get('cereales_granos', [])) if st.session_state.get('cereales_granos') else 'No especificado'}
- Frecuencia cereales: {st.session_state.get('frecuencia_cereales', 'No especificado')}
- Tub√©rculos: {', '.join(st.session_state.get('tuberculos', [])) if st.session_state.get('tuberculos') else 'No especificado'}
- Frecuencia tub√©rculos: {st.session_state.get('frecuencia_tuberculos', 'No especificado')}
- Consumo de frutas: {st.session_state.get('frutas_consumo', 'No especificado')}
- Consumo de vegetales: {st.session_state.get('vegetales_consumo', 'No especificado')}

=====================================
GRUPO 5: HIDRATACI√ìN Y BEBIDAS
=====================================
- Agua pura consumo: {st.session_state.get('agua_pura_consumo', 'No especificado')}
- Bebidas con cafe√≠na: {', '.join(st.session_state.get('bebidas_con_cafeina', [])) if st.session_state.get('bebidas_con_cafeina') else 'No especificado'}
- Frecuencia cafe√≠na: {st.session_state.get('frecuencia_cafeina', 'No especificado')}
- Otras bebidas: {', '.join(st.session_state.get('otras_bebidas', [])) if st.session_state.get('otras_bebidas') else 'No especificado'}
- Consumo de alcohol: {st.session_state.get('consumo_alcohol', 'No especificado')}
- Tipos de alcohol: {', '.join(st.session_state.get('tipos_alcohol', [])) if st.session_state.get('tipos_alcohol') else 'No especificado'}

=====================================
GRUPO 6: SUPLEMENTOS Y PRODUCTOS ESPECIALES
=====================================
- Usa suplementos: {st.session_state.get('usa_suplementos', 'No especificado')}
- Suplementos actuales: {', '.join(st.session_state.get('suplementos_actuales', [])) if st.session_state.get('suplementos_actuales') else 'No especificado'}
- Productos especiales: {', '.join(st.session_state.get('productos_especiales', [])) if st.session_state.get('productos_especiales') else 'No especificado'}
- Frecuencia productos especiales: {st.session_state.get('frecuencia_productos_especiales', 'No especificado')}

=====================================
APARTADO: ACEITES Y GRASAS DE COCINA
=====================================
- Aceites para cocinar: {', '.join(st.session_state.get('aceites_cocina', [])) if st.session_state.get('aceites_cocina') else 'No especificado'}
- Preferencia altas temperaturas: {st.session_state.get('preferencia_coccion', 'No especificado')}
- Aceites para ensaladas: {', '.join(st.session_state.get('aceites_ensalada', [])) if st.session_state.get('aceites_ensalada') else 'No especificado'}
- Cantidad aceite por d√≠a: {st.session_state.get('cantidad_aceite_dia', 'No especificado')}

=====================================
APARTADO: ALERGIAS E INTOLERANCIAS
=====================================
- Tiene alergias: {st.session_state.get('tiene_alergias', 'No especificado')}
- Alergias espec√≠ficas: {', '.join(st.session_state.get('alergias_especificas', [])) if st.session_state.get('alergias_especificas') else 'No especificado'}
- Otras alergias: {st.session_state.get('otras_alergias', 'No especificado')}
- Tiene intolerancias: {st.session_state.get('tiene_intolerancias', 'No especificado')}
- Intolerancias espec√≠ficas: {', '.join(st.session_state.get('intolerancias_especificas', [])) if st.session_state.get('intolerancias_especificas') else 'No especificado'}
- Otras intolerancias: {st.session_state.get('otras_intolerancias', 'No especificado')}

=====================================
APARTADO: PREFERENCIAS ALIMENTARIAS
=====================================
- Sabores favoritos: {', '.join(st.session_state.get('sabores_favoritos', [])) if st.session_state.get('sabores_favoritos') else 'No especificado'}
- Texturas favoritas: {', '.join(st.session_state.get('texturas_favoritas', [])) if st.session_state.get('texturas_favoritas') else 'No especificado'}
- Temperaturas preferidas: {', '.join(st.session_state.get('temperaturas_preferidas', [])) if st.session_state.get('temperaturas_preferidas') else 'No especificado'}
- Comidas comfort: {st.session_state.get('comidas_comfort', 'No especificado')}
- Alimentos que no le gustan: {st.session_state.get('alimentos_no_gustan', 'No especificado')}
- Curiosidad alimentaria: {st.session_state.get('curiosidad_alimentaria', 'No especificado')}

=====================================
APARTADO: ANTOJOS Y PATRONES EMOCIONALES
=====================================
- Frecuencia de antojos: {st.session_state.get('frecuencia_antojos', 'No especificado')}
- Tipos de antojos: {', '.join(st.session_state.get('tipos_antojos', [])) if st.session_state.get('tipos_antojos') else 'No especificado'}
- Horarios de antojos: {', '.join(st.session_state.get('horarios_antojos', [])) if st.session_state.get('horarios_antojos') else 'No especificado'}
- Triggers emocionales: {', '.join(st.session_state.get('triggers_emocionales', [])) if st.session_state.get('triggers_emocionales') else 'No especificado'}
- Control de antojos: {st.session_state.get('control_antojos', 'No especificado')}
- Estrategias para antojos: {st.session_state.get('estrategias_antojos', 'No especificado')}

=====================================
INFORMACI√ìN ADICIONAL Y CONTEXTO
=====================================
- Situaci√≥n familiar: {st.session_state.get('situacion_familiar', 'No especificado')}
- Qui√©n cocina: {st.session_state.get('quien_cocina', 'No especificado')}
- Presupuesto comida: {st.session_state.get('presupuesto_comida', 'No especificado')}
- Horarios de trabajo: {st.session_state.get('trabajo_horarios', 'No especificado')}
- Eventos sociales: {st.session_state.get('eventos_sociales', 'No especificado')}
- Frecuencia de viajes: {st.session_state.get('viajes_frecuencia', 'No especificado')}
- Objetivo principal detallado: {st.session_state.get('objetivo_principal_detallado', 'No especificado')}
- Raz√≥n del cambio: {st.session_state.get('razon_cambio', 'No especificado')}
- Experiencias previas: {st.session_state.get('experiencias_previas', 'No especificado')}

=====================================
RESUMEN DE AN√ÅLISIS IDENTIFICADO:
=====================================
Este cuestionario completo de patrones alimentarios proporciona una base integral 
para el desarrollo de recomendaciones nutricionales altamente personalizadas basadas en:

1. 6 grupos alimentarios principales evaluados
2. M√©todos de cocci√≥n disponibles y preferidos
3. Restricciones espec√≠ficas (alergias e intolerancias)  
4. Patrones de preferencias detallados
5. An√°lisis de antojos y alimentaci√≥n emocional
6. Contexto personal, familiar y social completo

RECOMENDACIONES PARA SEGUIMIENTO:
- Desarrollar plan nutricional personalizado basado en estos patrones
- Considerar restricciones y alergias como prioridad absoluta
- Aprovechar m√©todos de cocci√≥n preferidos y disponibles
- Integrar estrategias para manejo de antojos identificados
- Adaptar recomendaciones al contexto personal y familiar espec√≠fico

=====================================
¬© 2025 MUPAI - Muscle up GYM
Alimentary Pattern Assessment Intelligence
=====================================
"""
    return resumen

# RESUMEN FINAL Y ENV√çO DE EMAIL
st.markdown("---")
st.markdown('<div class="content-card" style="background: linear-gradient(135deg, #F4C430 0%, #DAA520 100%); color: #1E1E1E;">', unsafe_allow_html=True)
st.markdown("## üéØ **Resumen Final de tu Evaluaci√≥n de Patrones Alimentarios**")
st.markdown(f"*Fecha: {fecha_llenado} | Cliente: {nombre}*")

# Mostrar m√©tricas finales
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown(f"""
    ### ü•ó Preferencias
    - **Sabores principales:** {len(st.session_state.get('sabores_preferidos', []))} identificados
    - **Patr√≥n diet√©tico:** {st.session_state.get('patron_dietetico', 'Est√°ndar')}
    - **Restricciones:** {'S√≠' if st.session_state.get('tiene_alergias', 'No') != 'No' else 'No'}
    """)

with col2:
    st.markdown(f"""
    ### ‚è∞ Patrones Temporales  
    - **Comidas/d√≠a:** {st.session_state.get('comidas_por_dia', 'No especificado')}
    - **Horarios:** {'Regulares' if not st.session_state.get('horarios_irregulares') else 'Irregulares'}
    - **Snacks:** {st.session_state.get('snacks_frecuencia', 'No especificado')}
    """)

with col3:
    st.markdown(f"""
    ### üë®‚Äçüç≥ Habilidades
    - **Nivel cocina:** {st.session_state.get('nivel_cocina', 'No especificado')}
    - **Tiempo disponible:** {st.session_state.get('tiempo_cocinar_dia', 'No especificado')}
    - **Objetivo:** {st.session_state.get('objetivo_principal', 'No especificado')}
    """)

st.success(f"""
### ‚úÖ Evaluaci√≥n de patrones alimentarios completada exitosamente

Tu perfil alimentario ha sido analizado considerando todos los factores evaluados: preferencias, 
restricciones, habilidades culinarias, patrones temporales y contexto cultural. 

**Este an√°lisis proporciona la base para desarrollar recomendaciones nutricionales personalizadas** 
que se ajusten a tu estilo de vida y preferencias individuales.

Se recomienda consulta con nutricionista especializado para desarrollar plan espec√≠fico basado en estos patrones.
""")

st.markdown('</div>', unsafe_allow_html=True)

# Funci√≥n para verificar datos completos
def datos_completos_para_email():
    obligatorios = {
        "Nombre": st.session_state.get('nombre'),
        "Email": st.session_state.get('email_cliente'), 
        "Tel√©fono": st.session_state.get('telefono'),
        "Edad": st.session_state.get('edad')
    }
    faltantes = [campo for campo, valor in obligatorios.items() if not valor]
    return faltantes

# Bot√≥n para enviar email
if not st.session_state.get("correo_enviado", False):
    if st.button("üìß Enviar Resumen por Email", key="enviar_email"):
        faltantes = datos_completos_para_email()
        if faltantes:
            st.error(f"‚ùå No se puede enviar el email. Faltan: {', '.join(faltantes)}")
        else:
            with st.spinner("üìß Enviando resumen de patrones alimentarios por email..."):
                resumen_completo = crear_resumen_email()
                ok = enviar_email_resumen(
                    resumen_completo, 
                    st.session_state.get('nombre', ''), 
                    st.session_state.get('email_cliente', ''), 
                    st.session_state.get('fecha_llenado', ''), 
                    st.session_state.get('edad', ''), 
                    st.session_state.get('telefono', '')
                )
                if ok:
                    st.session_state["correo_enviado"] = True
                    st.success("‚úÖ Email enviado exitosamente a administraci√≥n")
                else:
                    st.error("‚ùå Error al enviar email. Contacta a soporte t√©cnico.")
else:
    st.info("‚úÖ El resumen ya fue enviado por email. Si requieres reenviarlo, usa el bot√≥n de 'Reenviar Email'.")

# Opci√≥n para reenviar manualmente
if st.button("üìß Reenviar Email", key="reenviar_email"):
    faltantes = datos_completos_para_email()
    if faltantes:
        st.error(f"‚ùå No se puede reenviar el email. Faltan: {', '.join(faltantes)}")
    else:
        with st.spinner("üìß Reenviando resumen por email..."):
            resumen_completo = crear_resumen_email()
            ok = enviar_email_resumen(
                resumen_completo, 
                st.session_state.get('nombre', ''), 
                st.session_state.get('email_cliente', ''), 
                st.session_state.get('fecha_llenado', ''), 
                st.session_state.get('edad', ''), 
                st.session_state.get('telefono', '')
            )
            if ok:
                st.session_state["correo_enviado"] = True
                st.success("‚úÖ Email reenviado exitosamente a administraci√≥n")
            else:
                st.error("‚ùå Error al reenviar email. Contacta a soporte t√©cnico.")

# Limpieza de sesi√≥n y bot√≥n de nueva evaluaci√≥n
if st.button("üîÑ Nueva Evaluaci√≥n", key="nueva"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

# Footer moderno
st.markdown("""
<div class="footer-mupai">
    <h4>MUPAI / Muscle up GYM Alimentary Pattern Assessment Intelligence</h4>
    <span>Digital Nutrition Science</span>
    <br>
    <span>¬© 2025 MUPAI - Muscle up GYM / MUPAI</span>
    <br>
    <a href="https://muscleupgym.fitness" target="_blank">muscleupgym.fitness</a>
</div>
""", unsafe_allow_html=True)
